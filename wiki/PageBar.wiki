= 快速搜索 =
不写php代码，快速生成Sql语句。是按照POST变量名称(key), 按照一定规则转换成Sql语句
{{{
<input type="text" name="username__like">
//转换成， 如果传递值为 howard
$sql .= " and username like 'howard'"
}}}

== 变量名称(key)命名规则 ==

{{{
格式1、 fieldname__rule // username__like , date__eq
格式2、 shorttablename_fieldname__rule // m_username__like member表(m 为定义的简写)username字段
格式3、 fieldname__rule__shorttablename // username__like__m 功能同上
}}}

shorttablename 必须是一个小的字母。

*格式2* 与 *格式3* 功能一样， 当符合 *格式3* 的匹配要求，则不再判断 *格式2* 。 *格式3* 是为了防止一些不符合要求的字段 例如 字段 'p_price' 。这样就必须使用*格式3*

rules 见下面的表格。


== 命名规则关键字 ==

|| *关键字* || *对应值* || *Key值* || *Sql例子* ||
|| like || like || {{{username__like}}} || username like 'howard'||
|| eq || = || {{{date__eq}}} || date = '2010-10-10' ||
|| gt || > || {{{date__gt}}} || date > '2010-10-10' ||
|| gteq || >= || {{{date__gteq}}} || date >= '2010-10-10 ||
|| lt || < || {{{date__lt}}} || date < '2010-10-10 ||
|| lteq || <= || {{{date__lteq}}} || date <= '2010-10-10 ||
|| rlike || {{{like xxx%}}} || username__rlike || username like 'howard%' ||
|| llike || {{{like %xxx}}} || username__llike || username like '%howard' ||
|| flike || {{{like %xxx%}}} || username__flike || username like '%howard%' ||

= 排序 =
= 分页 =

----
以下内容暂时废弃，不做参考
----

class PageBar。整合Doctrine, codeigniter->pagination 的分頁類。
Doctrine_Pager 用來查詢，并統計。 pagination 用來生成html。

{{{
#query 
$q = Doctrine_Query::create()
		->from('Member')
		->where($where)
		->orderBy('id desc');

$pageBar = new PageBar;
$pageBar->setBaseUrl('member/index') //分页中的地址
	->setPerPage(12) //每页显示多少行
	->setOffset($offset); // setUriSegment(3) 是舊的方式，
//第几页的开始字段，于codeigniter 结合 $CI->uri->segment()。
//分页开始的字段 member/index/24， 

list($items,$html) = $pageBar->get($q);
//$items 返回的查询结果
//$html 返回的pagebar html
}}}

== 控制显示条数 ==

在页面中可以选择每页显示多少条。 数据存储到Session中， 使用到 PageBarSession

{{{
$pageBar = new PageBar;
$pageBar->setBaseUrl('rank/index')
		->setPerPage(12,PageBar::PERPAGE_CHANGE) //默认为12条，
		->setUriSegment(3);
list($items,$html) = $pageBar->get($q);

##当下显示多少条
$pageBar->getPerPage();
}}}

= 查询条件 =
class PageBarSession 所有数据都根据使用 页面名称存储到Session。

{{{
$sData = PageBarSession::get();//取得查询条件
$data['sData'] = $sData;

//根据查询条件申城 where 語句
$where = " member_id='{$member->id}'";
if(!empty($sData->keyword))
    $where .= " and keyword like '%{$sData->keyword}%'";
}}}

== 上次查询地址 ==

{{{
$url = PageBarSession::getLastUri('member/news');

#在调用之前必须执行 
$sData = PageBarSession::get();
#或
PageBarSession::init();
}}}

= 例子 =
一个完整的综合查询的例子

{{{
//查詢條件
$sData = PageBarSession::get();
$data['sData'] = $sData;

//where 語句
$where = " member_id='{$member->id}'";
if(!empty($sData->keyword))
	$where .= " and keyword like '%{$sData->keyword}%'";
if(!empty($sData->url)&&$sData->url!='http://')
	$where .= " and url like '%{$sData->url}%'";
if(!empty($sData->group_id))
	$where .= " and group_id = '{$sData->group_id}'";

//分頁
$q = Doctrine_Query::create()
		->from('Rank')
		->where($where)
		->orderBy('id desc');

$pageBar = new PageBar;
$pageBar->setBaseUrl('rank/index')
		->setPerPage(12,PageBar::PERPAGE_CHANGE)
		->setUriSegment(3);
list($items,$html) = $pageBar->get($q);

$data['rankList'] = $items;
$data['pageBar'] = $html;
$data['perPage'] = $pageBar->getPerPage();
}}}